<?xml version="1.0" encoding="UTF-8"?>
<syntax name="commentjson">
    <meta>
        <name>JSON with Comments</name>
        <type>structured</type>
        <preferred-file-extension>json</preferred-file-extension>
    </meta>
    
    <detectors>
        <extension priority="1.0">json</extension>
    </detectors>
    
    <indentation>
        <increase>
            <expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
        </increase>
        <decrease>
            <expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
        </decrease>
    </indentation>
    
    <comments>
        <single>
            <expression>//</expression>
        </single>
        <multiline>
            <starts-with>
                <expression>/*</expression>
            </starts-with>
            <ends-with>
                <expression>*/</expression>
            </ends-with>
        </multiline>
    </comments>
    
    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>
    
    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
        <pair open="`" close="`" />
    </surrounding-pairs>
    
    <scopes>
        <include syntax="self" collection="values" />
        <include syntax="self" collection="syntax" />
        <include syntax="self" collection="comments" />
    </scopes>
    
    <collections>
        <!-- comments -->
        <collection name="comments">
            <scope name="rust.comment.single">
                <expression>//(?:/|!)?(.*)$</expression>
                <capture number="1" name="rust.comment.content" />
            </scope>
            <scope name="rust.comment.block">
                <starts-with>
                    <expression>/\*</expression>
                </starts-with>
                <ends-with>
                    <expression>\*/</expression>
                </ends-with>
            </scope>
        </collection>
        
        <!-- Values -->
        <collection name="values">
            <include syntax="self" collection="strings" />
            <include syntax="self" collection="objects" />
            <scope name="commentjson.value.null">
                <strings>
                    <string>null</string>
                    <string>undefined</string>
                    <string>NaN</string>
                    <string>Infinity</string>
                </strings>
            </scope>
            <scope name="commentjson.value.boolean">
                <strings>
                    <string>true</string>
                    <string>false</string>
                </strings>
            </scope>
            <scope name="commentjson.value.number">
                <expression>\b\-?(?:\d+(?:\.\d*)?|(?:\.\d+))\b</expression>
            </scope>
        </collection>
        
        <!-- Strings -->
        <collection name="strings">
            <scope name="commentjson.string.double-quoted">
                <starts-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="commentjson.string.double-quoted.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>&quot;|(?:(?&lt;!\\)$)</expression>
                    <capture number="0" name="commentjson.string.double-quoted.delimiter" />
                </ends-with>
                <subscopes>
                    <scope name="commentjson.string.double-quoted.escape">
                        <expression>\\(?:\\|&apos;|&quot;|n|r|t|b|f)</expression>
                    </scope>
                </subscopes>
            </scope>
            <scope name="commentjson.string.single-quoted">
                <starts-with>
                    <expression>&apos;</expression>
                    <capture number="0" name="commentjson.string.single-quoted.delimiter" />
                </starts-with>
                <ends-with>
                    <expression>&apos;|(?:(?&lt;!\\)$)</expression>
                    <capture number="0" name="commentjson.string.single-quoted.delimiter" />
                </ends-with>
                <subscopes>
                    <scope name="commentjson.string.single-quoted.escape">
                        <expression>\\(?:\\|&apos;|&quot;|n|r|t|b|f)</expression>
                    </scope>
                </subscopes>
            </scope>
        </collection>
        
        <!-- Keys -->
        <collection name="keys">
            <scope name="commentjson.string.key.double-quoted">
                <symbol type="property">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>(&quot;)((?:(?:\\(?:\\|&apos;|&quot;|n|r|t|b|f))|(?:[^&quot;]))*)(&quot;)\s*(:)</expression>
                    <capture number="1" name="commentjson.string.key.double-quoted.delimiter" />
                    <capture number="2" name="commentjson.key.double-quoted.name" />
                    <capture number="3" name="commentjson.string.key.double-quoted.delimiter" />
                    <capture number="4" name="commentjson.operator.colon" />
                </starts-with>
                <ends-with>
                    <expression>(?=\,|\})</expression>
                </ends-with>
                <subscopes anchored="true">
                    <include syntax="self" collection="values" />
                </subscopes>
            </scope>
            <scope name="commentjson.string.key.single-quoted">
                <symbol type="property">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>(&apos;)((?:(?:\\(?:\\|&apos;|&quot;|n|r|t|b|f))|(?:[^&apos;]))*)(&apos;)\s*(:)</expression>
                    <capture number="1" name="commentjson.string.key.single-quoted.delimiter" />
                    <capture number="2" name="commentjson.key.double-quoted.name" />
                    <capture number="3" name="commentjson.string.key.single-quoted.delimiter" />
                    <capture number="4" name="commentjson.operator.colon" />
                </starts-with>
                <ends-with>
                    <expression>(?=\,|\})</expression>
                </ends-with>
                <subscopes anchored="true">
                    <include syntax="self" collection="values" />
                </subscopes>
            </scope>
        </collection>
        
        <!-- Objects -->
        <collection name="objects">
            <scope name="commentjson.object">
                <symbol type="block">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\{</expression>
                    <capture number="0" name="commentjson.object.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\}</expression>
                    <capture number="0" name="commentjson.object.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="keys" />
                    <include syntax="self" />
                </subscopes>
            </scope>
            <scope name="commentjson.array">
                <symbol type="block">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\[</expression>
                    <capture number="0" name="commentjson.array.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\]</expression>
                    <capture number="0" name="commentjson.array.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" />
                </subscopes>
            </scope>
        </collection>
        
        <!-- Syntax -->
        <collection name="syntax">
            <scope name="commentjson.bracket">
                <expression>[\{\(\[\}\)\]]</expression>
            </scope>
            <scope name="commentjson.comma">
                <expression>,</expression>
            </scope>
            <scope name="commentjson.semicolon">
                <expression>;</expression>
            </scope>
        </collection>
    </collections>
</syntax>
